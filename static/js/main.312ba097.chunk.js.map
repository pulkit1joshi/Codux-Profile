{"version":3,"sources":["Components/Users/SubComponents/forms.js","Components/Users/UserInfo.js","actions/userActions.js","actions/links.js","actions/types.js","Components/Users/SubComponents/ratingitem.js","Components/SubComponents/Graph.js","Components/Users/RatingHistory.js","Components/Users/UserSubmissions.js","Components/Users/Users.js","actions/cfactions.js","Components/Contests/SubComponents/contestitem.js","Components/Contests/Upcoming.js","Components/Contests/Div1.js","Components/Contests/Div2.js","Components/Contests/Div3.js","Components/Contests/global.js","Components/Contests/ContestInfo.js","Components/Main.js","Reducers/userReducer.js","Reducers/cfReducer.js","Reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","name","onChange","bind","e","this","setState","target","value","type","className","to","Component","UserInfo","string","match","params","username","fetchUser","Fragment","style","padding","userexists","src","info","titlePhoto","alt","height","width","rank","organisation","contribution","rating","maxRank","maxRating","connect","user","userExists","ratinghist","usersubmissions","dispatch","console","log","fetch","then","res","json","userData","payload","catch","error","RatingItem","num","item","contestName","options","showAllTooltips","tooltips","callbacks","title","tooltipItem","data","Graph","getdata","data2","labels","map","datapoint","index","push","datasets","label","backgroundColor","borderColor","borderWidth","RatingHistory","oldRating","getlabels","string2","fetchRatingHist","contest","key","ratingData","UserSubmissions","string3","fetchUSubmissions","id","submissionData","Users","chartRef","React","createRef","path","exact","component","fetchContests","cdata","contestsData","upcom","div1","div2","div3","global","result","phase","includes","upcoming","div1list","div2list","div3list","globallist","ContestItem","time","timeleft","days","interval","formattedTime","Date","startTimeSeconds","toString","setInterval","getTime","Math","floor","hours","min","clearInterval","isLoggedIn","href","renderAuthButton","Upcoming","fetched","class","scope","upcominglist","Div1","Div1list","Div2","Div2list","Div3","Div3list","Global","Globallist","ContestInfo","data-toggle","Main","initialState","lastOnlineTimeSeconds","friendOfCount","handle","avatar","registrationTimeSeconds","initialstate","contestlist","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","paddingBottom","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.312ba097.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n\n                <form>\n                    Enter Handle :\n\t\t\t    <input type=\"text\" name=\"name\" className=\"form-control form-control\" value={this.state.name} onChange={this.onChange} /><br />\n                    <Link to={`/user/${this.state.name}/info`}><button type=\"submit\" className=\"btn btn-light\">Submit</button></Link>\n                    <br />\n                </form>\n\n            </div>\n        )\n    }\n}\n\n\nexport default Form;\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchUser } from '../../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport class UserInfo extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n        };\n    }\n\n    componentDidMount() {\n        const string = this.props.match.params.username;\n        this.props.fetchUser(string);\n    }\n\n\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <nav className=\"navbar navbar-expand-sm bg-light navbar-light justify-content-center nav-tabs\">\n                    <ul className=\"navbar-nav \">\n                        <li className=\"nav-item\">\n                            <Link to={`/user`} className=\"nav-link\"> {\"<\"} </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link active\"> Basic </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link\"> Rating History </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                <div style={{padding: \"5rem\"}}>\n                {this.props.name}\t<br />\n                {this.props.userexists &&\n                    <div>\n                        <img src={this.props.info.titlePhoto} alt=\"Title\" height=\"100\" width=\"100\"></img><br />\n\t\t\tRank : {this.props.info.rank} <br />\n\t\t\tOrganisation: {this.props.info.organisation} <br />\n\t\t\tContribution: {this.props.info.contribution} <br />\n\t\t\tRating: {this.props.info.rating} <br />\n\t\t\tMaxrank: {this.props.info.maxRank} <br />\n\t\t\tMaxRating: {this.props.info.maxRating} <br />\n                        <br />\n                    </div>\n                }\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nUserInfo.propTypes = {\n    fetchUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    info: state.user.info,\n    ratinghist: state.user.ratinghist,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchUser })(UserInfo)\n","import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from './types';\nimport {userstatus , userrating, userinfo } from './links';\n\nexport const fetchUser = string => dispatch => {\n    console.log(\"User fetched\");\n    const url = userinfo + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(userData =>\n        dispatch({\n          type: FETCH_USER,\n          payload: userData,\n          userExists: 1\n        })\n      )\n      .catch(error => {\n        dispatch({\n            type: FETCH_USER,\n            payload: error,\n            userExists: 0\n          })\n    });\n  };\n\nexport const fetchUSubmissions = string => dispatch => {\n    console.log('Submissions Fetched');\n    const url = userstatus + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(submissionData =>\n        dispatch({\n          type: FETCH_USUBMISSIONS,\n          payload: submissionData,\n          name: string\n        })\n      );\n}\n\nexport const fetchRatingHist = string => dispatch => {\n    console.log('Rating History Fetched');\n    const url = userrating + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(ratingData =>\n        dispatch({\n          type: FETCH_RATINGHIST,\n          payload: ratingData,\n          name: string\n        })\n      );\n}","// Defines constant\nexport const userinfo = 'https://codeforces.com/api/user.info?handles=';\nexport const userrating = 'https://codeforces.com/api/user.rating?handle=';\nexport const userstatus = 'https://codeforces.com/api/user.status?handle=';\nexport const contests = 'https://codeforces.com/api/contest.list';","// Defines constant\nexport const FETCH_USER = 'FETCH_USER';\nexport const FETCH_RATINGHIST = 'FETCH_RATINGHIST'\nexport const FETCH_USUBMISSIONS = 'FETCH_USUBMISSIONS'\nexport const FETCH_CONTESTS = 'FETCH_CONTESTS'","import React, { Component } from 'react'\n\nexport default class RatingItem extends Component {\n\n    componentWillMount() {\n        console.log(this.props);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.num}. Contest Name: { this.props.item.contestName}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst options = {\n\tshowAllTooltips: true,\n\ttooltips: {\n\t  callbacks: {\n\t\ttitle: function(tooltipItem, data) {\n\t\t  return;\n\t\t}\n\t  }\n\t}\n  }\n\nexport default class Graph extends Component {\n    getdata=() => {\n        var data2 =[];\n        var labels = [];\n\t\tthis.props.data.map((datapoint, index) => \n\t\t\t{\n\t\t\tdata2.push(datapoint);\n\t\t\tlabels.push(index);\n\t\t\treturn 0;\n\t\t\t}\n\t\t);\n        let data = {\n            labels: this.props.labels,\n            datasets: [\n                {\n                    label: 'Rating',\n                    backgroundColor: 'rgba(65, 142, 200, 0.2)',\n\t\t\t\t\tborderColor: 'rgba(65, 142, 200, 1)',\n\t\t\t\t\tborderWidth: 1,\n                    data: data2,\n                },\n\t\t\t],\n\t\t}\n        return data;\n    }\n    render() {\n\t\treturn (\n\t\t<div>\n\t\t\t<Line options={options} data={this.getdata}/>\n\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchRatingHist } from '../../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nimport RatingItem from './SubComponents/ratingitem.js'\nimport Graph from '../SubComponents/Graph.js'\n\nexport class RatingHistory extends Component {\n\n    componentDidMount() {\n        const string2 = this.props.match.params.username;\n        this.props.fetchRatingHist(string2);\n    }\n\n    getdata=() => {\n        var data2 = [];\n        this.props.ratinghist.map((datapoint, index) => \n        {\n            data2.push(datapoint.oldRating);\n            return 0;\n        });\n        console.log(data2);\n        return data2;\n    }\n\n    getlabels=() => {\n        var data2 = [];\n        this.props.ratinghist.map((datapoint, index) => \n        {\n            data2.push(index);\n            return 0;\n        });\n        console.log(data2);\n        return data2;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <nav className=\"navbar navbar-expand-sm bg-light navbar-light nav-tabs\">\n                    <ul className=\"navbar-nav nav-fill mx-auto\">\n                    <li className=\"nav-item\">\n                            <Link to={`/user`} className=\"nav-link\"> {\"<\"} </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link\"> Basic </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link active\"> Rating History </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                <div style={{padding: \"5rem\"}}>\n                <Graph data={this.getdata()} labels={this.getlabels()} />\n                {this.props.ratinghist.map((contest, index) => (\n                    <RatingItem key={index} item={contest} num={index + 1} />\n                ))}\n</div>\n            </React.Fragment>\n        )\n    }\n}\n\nRatingHistory.propTypes = {\n    fetchRatingHist: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    ratinghist: state.user.ratinghist,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchRatingHist })(RatingHistory)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchUSubmissions } from '../../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport class UserSubmissions extends Component {\n\n    componentDidMount() {\n        const string3 = this.props.match.params.username;\n        this.props.fetchUSubmissions(string3);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <nav className=\"navbar navbar-expand-sm bg-light navbar-light nav-tabs\">\n                    <ul className=\"navbar-nav nav-fill mx-auto\" id=\"navid\">\n                        <li className=\"nav-item\">\n                            <Link to={`/user`} className=\"nav-link\"> {\"<\"} </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link\"> Basic </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link\"> Rating History </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link active\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                <div style={{ padding: \"5rem\" }}>\n                    {this.props.name}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nUserSubmissions.propTypes = {\n    fetchUSubmissions: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchUSubmissions })(UserSubmissions)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { Switch } from \"react-router-dom\";\n\nimport Form from './SubComponents/forms'\nimport UserInfo from './UserInfo'\nimport RatingHistory from './RatingHistory'\nimport UserSubmissions from './UserSubmissions'\n\nclass Users extends Component {\n\n  chartRef = React.createRef();\n\n  render() {\n    return (\n      <React.Fragment>\n        <HashRouter>\n          <div>\n          <div className=\"row\">\n            <div className=\"col-sm-1\"></div>\n            <div className=\"col-sm-10\">\n              <Switch> \n              <Route path='/user/' exact component={Form}></Route>   \n              <Route path='/user/:username/info' exact component={UserInfo}></Route>\n              <Route path='/user/:username/ratinghistory' exact component={RatingHistory}></Route>\n              <Route path='/user/:username/submissions' exact component={UserSubmissions}></Route>\n              </Switch>\n            </div>\n          </div>\n          </div>\n        </HashRouter>\n      </React.Fragment>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  userexists: state.user.userExists,\n  name: state.user.name,\n  info: state.user.info,\n  ratinghist: state.user.ratinghist,\n  usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, null)(Users);","\nimport { FETCH_CONTESTS } from './types';\nimport { contests } from './links';\n\nexport const fetchContests = () => dispatch => {\n    console.log('Contestss Fetched');\n    const url = contests;\n    let cdata = [];\n    fetch(url)\n        .then(res => res.json())\n        .then(contestsData => {\n            cdata = contestsData;\n            let upcom = [];\n            let div1 = [];\n            let div2 = [];\n            let div3 = [];\n            let global = [];\n            cdata.result.map((contest, index) => {\n                if (contest.phase === \"BEFORE\") {\n                    upcom.push(contest);\n                }\n                if (contest.name.includes(\"Div. 1\")) {\n                    div1.push(contest);\n                }\n                else if (contest.name.includes(\"Div. 2\")) {\n                    div2.push(contest);\n                }\n                else if (contest.name.includes(\"Div. 3\")) {\n                    div3.push(contest);\n                }\n                else {\n                    global.push(contest);\n                }\n                return 0;\n            })\n            dispatch({\n                type: FETCH_CONTESTS,\n                payload: cdata.result,\n                upcoming: upcom,\n                div1list: div1,\n                div2list: div2,\n                div3list: div3,\n                globallist: global,\n            })\n        }\n        );\n\n}","import React, { Component } from 'react'\n\nexport default class ContestItem extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            time: \"\",\n            timeleft: \"\",\n            days: \"\",\n        }\n        this.interval = '';\n    }\n\n    componentDidMount() {\n\n        let dateObj = new Date(this.props.item.startTimeSeconds * 1000);\n\n        let formattedTime = dateObj.toString();\n        this.setState({\n            time: formattedTime,\n        })\n        if(this.props.type === 1)\n        {\n        this.interval = setInterval(() => {\n            let time = this.props.item.startTimeSeconds;\n            let unix = new Date().getTime() / 1000;\n            let timeleft = time - unix;\n            let days = Math.floor(timeleft / (3600 * 24));\n            timeleft = timeleft % (3600 * 24);\n            let hours = Math.floor(timeleft / 3600);\n            timeleft = timeleft % 3600;\n            let min = Math.floor(timeleft / 60);\n            timeleft = timeleft % 60;\n            let seconds = Math.floor(timeleft);\n            let formattedTime = hours + \"h:\" + min + \"m:\" +seconds + \"s\";\n            this.setState({\n                timeleft: formattedTime,\n                days: \"Days:\" + days,\n            })\n        },1000);\n    }\n    }\n    \n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n\n    render() {\n\n        let isLoggedIn = this.props.type;\n        const renderAuthButton = ()=> {\n        if(isLoggedIn === 1){\n            return <td>{this.state.days} <br/> {this.state.timeleft} </td>\n          }\n        }\n        \n        return (\n                <tr>\n                    <td>{this.props.num}</td>\n                    <td>{this.state.time}</td>\n                    <td><a href={\"https://codeforces.com/contest/\"+this.props.item.id}>{ this.props.item.name}</a></td>\n                    {renderAuthButton()}\n                </tr>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from './SubComponents/contestitem.js'\nimport { fetchContests } from '../../actions/cfactions'\n\nexport class Upcoming extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Time Left</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.upcominglist.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={1} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nUpcoming.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    upcominglist: state.contest.upcominglist,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Upcoming)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from './SubComponents/contestitem.js'\nimport { fetchContests } from '../../actions/cfactions'\n\nexport class Div1 extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Div1list.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nDiv1.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Div1list: state.contest.div1list,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Div1)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from './SubComponents/contestitem.js'\nimport { fetchContests } from '../../actions/cfactions'\n\nexport class Div2 extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Div2list.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nDiv2.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Div2list: state.contest.div2list,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Div2)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from './SubComponents/contestitem.js'\nimport { fetchContests } from '../../actions/cfactions'\n\nexport class Div3 extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Div3list.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nDiv3.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Div3list: state.contest.div3list,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Div3)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from './SubComponents/contestitem.js'\nimport { fetchContests } from '../../actions/cfactions'\n\nexport class Global extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Globallist.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nGlobal.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Globallist: state.contest.globallist,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Global)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { Switch } from \"react-router-dom\";\n\nimport { fetchContests } from '../../actions/cfactions'\nimport { Link } from 'react-router-dom'\nimport Upcoming from './Upcoming'\nimport Div1 from './Div1.js';\nimport Div2 from './Div2.js';\nimport Div3 from './Div3.js';\nimport Global from './global';\n\nexport class ContestInfo extends Component {\n    componentDidMount() {\n        if(this.props.fetched === 0) this.props.fetchContests();\n        console.log(\"ContestInfo\");\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <HashRouter>\n                    <nav className=\"navbar navbar-expand-sm bg-light navbar-light justify-content-center nav-tabs\">\n                        <ul className=\"navbar-nav \">\n                            <li className=\"nav-item\">\n                                <Link to={`/contests/`} className=\"nav-link\"> {\"<\"} </Link>\n                            </li>\n                            <li className=\"nav-item\">\n                            <Link to={`/contests/upcoming/`} className=\"nav-link\"> Upcoming </Link>\n                            </li>\n                            <li className=\"nav-item dropdown\">\n                                <Link to={'#'} className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\">Type</Link>\n                                <div class=\"dropdown-menu bg-light\">\n                                <Link to={`/contests/div1`} className=\"dropdown-item \"> Div 1 </Link>\n                                <Link to={`/contests/div2`} className=\"dropdown-item \"> Div 2 </Link>\n                                <Link to={`/contests/div3`} className=\"dropdown-item \"> Div 3 </Link>\n                                <Link to={`/contests/global`} className=\"dropdown-item \"> Global </Link>\n                                </div>\n                            </li>\n                        </ul>\n                    </nav>\n\n                    <Switch>\n                        <Route path='/contests/upcoming/' exact component={Upcoming}></Route>\n                        <Route path='/contests/div1/' exact component={Div1}></Route>\n                        <Route path='/contests/div2/' exact component={Div2}></Route>\n                        <Route path='/contests/div3/' exact component={Div3}></Route>\n                        <Route path='/contests/global/' exact component={Global}></Route>\n                    </Switch>\n\n                </HashRouter>\n            </React.Fragment>\n        )\n    }\n}\n\nContestInfo.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched\n})\n\nexport default connect(mapStateToProps, { fetchContests })(ContestInfo)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { Switch } from \"react-router-dom\";\nimport Users from './Users/Users'\n\nimport ContestInfo from './Contests/ContestInfo'\n//import { Link } from 'react-router-dom'\n\n/* Available data :\n\n1. this.props.name\n2. this.props.info\n-------------------Data structure for info -----------------------------------------\n\n\n\n{\n      contribution: -1,\n      lastOnlineTimeSeconds: 1,\n      rating: ,\n      friendOfCount: 0,\n      titlePhoto: '//userpic.codeforces.com/no-title.jpg',\n      rank: '',\n      handle: '-e',\n      maxRating: ,\n      avatar: '//userpic.codeforces.com/no-avatar.jpg',\n      registrationTimeSeconds: 1571594608,\n      maxRank: ''\n},\n\n    \n\n3. this.props.ratinghist\n\n------------------- Data structure for ratinghist --------------------------------- ratinghist is array so each array element is as shown\n\nratinghist: [\n      {\n        contestId: 1,\n        contestName: '',\n        handle: 'name of the user',\n        rank: his rank,\n        ratingUpdateTimeSeconds: 1571936700,\n        oldRating: rating old,\n        newRating: rating new,\n      },\n\t]\n\n4. this.props.usersubmissions\n\n------ It have the following data -------- Make sure this.props.usersubmissions[i] exists before checking out this.props.usersubmissions[i].id or contestId\n\n       {\n          \"id\": -1,\n          \"contestId\": -1,\n          \"creationTimeSeconds\": 0,\n          \"relativeTimeSeconds\": 0,\n          \"problem\": {\n            \"contestId\": 0,\n            \"index\": \"1\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"points\": 1,\n            \"rating\": 1,\n            \"tags\": [\n              \"-\",\n              \"-\",\n              \"-\"\n            ]\n          },\n          \"author\": {\n            \"contestId\": 1,\n            \"members\": [\n              {\n                \"handle\": \"\"\n              }\n            ],\n            \"participantType\": \"PRACTICE\",\n            \"ghost\": false,\n            \"startTimeSeconds\": 1\n          },\n          \"programmingLanguage\": \"GNU C++14\",\n          \"verdict\": \"OK\",\n          \"testset\": \"TESTS\",\n          \"passedTestCount\": 66,\n          \"timeConsumedMillis\": 296,\n          \"memoryConsumedBytes\": 1638400\n        }]\n\n*/\n\nclass Main extends Component {\n\n  chartRef = React.createRef();\n\n  render() {\n    return (\n      <React.Fragment>\n        <HashRouter>\n          <div>\n          <div className=\"row\">\n            <div className=\"col-sm-1\"></div>\n            <div className=\"col-sm-10\">\n              <Switch> \n              <Route path='/contests/' component={ContestInfo}></Route>   \n              <Route path='/user/' component={Users}></Route>   \n              </Switch>\n            </div>\n          </div>\n          </div>\n        </HashRouter>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default connect(null, null)(Main);","import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from '../actions/types';\n\nconst initialState = {\n  userExists: 0,\n  name: '',\n  info: {\n    contribution: '',\n    lastOnlineTimeSeconds: '',\n    rating: '',\n    friendOfCount: '',\n    titlePhoto: '',\n    rank: '',\n    handle: '-e',\n    maxRating: '',\n    avatar: '',\n    registrationTimeSeconds: '',\n    maxRank: ''\n  },\n  ratinghist: [],\n  usersubmissions: [\n    {\n      \"id\": -1,\n      \"contestId\": -1,\n      \"creationTimeSeconds\": 0,\n      \"relativeTimeSeconds\": 0,\n      \"problem\": {\n        \"contestId\": 0,\n        \"index\": \"1\",\n        \"name\": \"\",\n        \"type\": \"\",\n        \"points\": 1,\n        \"rating\": 1,\n        \"tags\": [\n          \"-\",\n          \"-\",\n          \"-\"\n        ]\n      },\n      \"author\": {\n        \"contestId\": 1,\n        \"members\": [\n          {\n            \"handle\": \"\"\n          }\n        ],\n        \"participantType\": \"PRACTICE\",\n        \"ghost\": false,\n        \"startTimeSeconds\": 1\n      },\n      \"programmingLanguage\": \"GNU C++14\",\n      \"verdict\": \"OK\",\n      \"testset\": \"TESTS\",\n      \"passedTestCount\": 66,\n      \"timeConsumedMillis\": 296,\n      \"memoryConsumedBytes\": 1638400\n    }]\n}\n\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n    case FETCH_USER:\n      console.log(action.payload);\n      if (action.payload.result) {\n        return {\n          ...state,\n          name: action.payload.result[0].handle,\n          info: action.payload.result[0],\n          userExists: action.userExists\n        };\n      }\n      else {\n        return {\n          ...state,\n          name: 'User_Not_Found',\n          //info: initialState.info,\n          userExists: action.userExists\n        };\n      }\n    case FETCH_RATINGHIST:\n      {\n        console.log(action.payload.result);\n        return {\n          ...state,\n          ratinghist: action.payload.result,\n          name: action.name\n        };\n      }\n    case FETCH_USUBMISSIONS:\n      {\n        console.log(\"Submissions\");\n        console.log(action.payload.result);\n        return {\n          ...state,\n          usersubmissions: action.payload.result,\n          name: action.name\n        };\n      }\n  }\n}","import { FETCH_CONTESTS } from '../actions/types';\n\nconst initialstate = {\n    contestlist: [],\n    upcominglist: [],\n    div1list: [],\n    div2list: [],\n    div3list: [],\n    globallist: [],\n    fetched: 0,\n}\n\nexport default function(state = initialstate,action) {\n    switch(action.type)\n    {\n        default:\n            return state;\n        case FETCH_CONTESTS:\n            console.log(action.div1list);\n            return {\n                ...state,\n                contestlist: action.payload.result,\n                upcominglist: action.upcoming,\n                div1list: action.div1list,\n                div2list: action.div2list,\n                div3list: action.div3list,\n                globallist: action.globallist,\n                fetched: 1,\n            };\n    }\n}","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\nimport contestReducer from './cfReducer';\n\nexport default combineReducers({\n    contest: contestReducer,\n    user: userReducer,\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)/*,\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/\n    )\n);\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Main from './Components/Main';\n\nimport store from './store'\nimport { HashRouter } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter>\n        <div>\n          <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <Link to={`/contests`} className=\"nav-link\"> Contests </Link>\n              </li>\n              <li className=\"nav-item\">\n              <Link to={`/user`} className=\"nav-link\"> Search </Link>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"https://github.com/pulkit1joshi/Codux-Profile\">Git</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\">About</a>\n              </li>\n            </ul>\n          </nav>\n        </div>\n        <div className=\"container\" style={ {paddingBottom: \"60px;\"} }>\n          <div className=\"row\">\n            <div className=\"col-lg-12 text-center\">\n              <h1 className=\"mt-5\">Codux</h1>\n              <p className=\"lead\">Check your coding profile at <img\n                src=\"https://sta.codeforces.com/s/70808/images/codeforces-logo-with-telegram.png\" alt=\"Codeforces\"\n                style={{ width:\"15%\" ,height:\"15%\" }}></img>\n              </p>\n              <div className=\"App\">\n                <hr />\n                <Main />\n              </div>\n            </div>\n          </div>\n        </div>\n\n       \n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}