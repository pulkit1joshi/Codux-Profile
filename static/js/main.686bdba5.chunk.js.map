{"version":3,"sources":["Components/Users/SubComponents/forms.js","Components/Users/UserInfo.js","actions/userActions.js","actions/links.js","actions/types.js","Components/Users/SubComponents/ratingitem.js","Components/SubComponents/Graph.js","Components/Users/RatingHistory.js","Components/Users/UserSubmissions.js","Components/Users/Users.js","actions/cfactions.js","Components/Contests/SubComponents/contestitem.js","Components/Contests/Upcoming.js","Components/Contests/Type/Div1.js","Components/Contests/Type/Div2.js","Components/Contests/Type/Div3.js","Components/Contests/Type/global.js","Components/Contests/Format/Cf.js","Components/Contests/Format/Ioi.js","Components/Contests/Format/Icpc.js","Components/Contests/Home.js","Components/Contests/ContestInfo.js","Components/Main.js","Reducers/userReducer.js","Reducers/cfReducer.js","Reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","name","onChange","bind","e","this","setState","target","value","className","type","id","placeholder","to","Component","UserInfo","string","match","params","username","fetchUser","Fragment","class","style","padding","userexists","src","info","titlePhoto","alt","height","width","rank","organisation","contribution","rating","maxRank","maxRating","connect","user","userExists","ratinghist","usersubmissions","dispatch","console","log","fetch","then","res","json","userData","payload","catch","error","RatingItem","num","item","contestName","options","showAllTooltips","tooltips","callbacks","title","tooltipItem","data","Graph","getdata","data2","labels","map","datapoint","index","push","datasets","label","backgroundColor","borderColor","borderWidth","RatingHistory","oldRating","getlabels","string2","fetchRatingHist","contest","key","ratingData","UserSubmissions","string3","fetchUSubmissions","submissionData","Users","chartRef","React","createRef","path","exact","component","fetchContests","cdata","contestsData","upcom","div1","div2","div3","cf","ioi","icpc","global","result","phase","includes","upcoming","div1list","div2list","div3list","ioilist","icpclist","cflist","globallist","count","length","total","ContestItem","time","timeleft","days","link","interval","dateObj","Date","startTimeSeconds","dt","unix","getTime","getMonth","getDate","getYear","toLocaleString","hour","minute","hour12","setInterval","Math","floor","hours","min","formattedTime","str","clearInterval","isLoggedIn","href","renderAuthButton","Upcoming","fetched","scope","upcominglist","Div1","Div1list","Div2","Div2list","Div3","Div3list","Global","Globallist","CFLIST","CFLISTlist","Ioilist","Ioilistlist","Icpclist","Icpclistlist","Home","counts","ContestInfo","data-toggle","margin","Main","initialState","lastOnlineTimeSeconds","friendOfCount","handle","avatar","registrationTimeSeconds","initialstate","contestlist","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","data-target","aria-controls","aria-expanded","aria-label","paddingBottom","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.686bdba5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport './from.css';\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-sm-2\"></div>\n                <div className=\"col-sm-8\">\n                <form>\n                \n\t\t\t    <input type=\"text\" name=\"name\" className=\"form-control form-control \"  id=\"ip1\" value={this.state.name} placeholder=\"Your Handle Here\" onChange={this.onChange} /><br /><br/>\n                    <Link to={`/user/${this.state.name}/info`}><button type=\"submit\"  className=\"btn btn-dark\">Get Data</button></Link>\n                    <br />\n                   \n                </form>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Form;\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchUser } from '../../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\n\nexport class UserInfo extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n        };\n    }\n\n    componentDidMount() {\n        const string = this.props.match.params.username;\n        this.props.fetchUser(string);\n    }\n\n\n\n    render() {\n        return (\n            \n            <React.Fragment>\n\n                <nav className=\"navbar navbar-expand-sm bg-light navbar-light justify-content-center nav-tabs\">\n                    <ul className=\"navbar-nav \">\n                        <li className=\"nav-item\">\n                            <Link to={`/user`} className=\"nav-link\"> {\"<\"} </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link active\"> Basic </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link\"> Rating History </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                <div class=\"jumbotron\" style={{padding: \"3rem\" }}>\n                <strong>{this.props.name} </strong>\t<br /><br/>\n                    {this.props.userexists &&\n                        <div class=\"ip\">\n                            <img src={this.props.info.titlePhoto} class=\"img-thumbnail \" alt=\"Title\" height=\"100\" width=\"100\"></img><br /><br/>\n \t\t    <ul class=\"list-group\">\n            <li class=\"list-group-item\"><strong>Rank</strong> : {this.props.info.rank}</li>\n\t\t\t<li class=\"list-group-item\"><strong>Organisation:</strong>{this.props.info.organisation}</li>\n\t\t\t<li class=\"list-group-item\"><strong>Contributions:</strong>{this.props.info.contribution}</li>\n\t\t\t<li class=\"list-group-item\"><strong>Rating:</strong> {this.props.info.rating}</li>\n\t\t\t<li class=\"list-group-item\"><strong>Maxrank:</strong> {this.props.info.maxRank}</li>\n\t\t\t<li class=\"list-group-item\"><strong>MaxRating:</strong> {this.props.info.maxRating}</li>\n                            <br />\n                            </ul>\n                        </div>\n                    }\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nUserInfo.propTypes = {\n    fetchUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    info: state.user.info,\n    ratinghist: state.user.ratinghist,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchUser })(UserInfo)\n","import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from './types';\nimport {userstatus , userrating, userinfo } from './links';\n\nexport const fetchUser = string => dispatch => {\n    console.log(\"User fetched\");\n    const url = userinfo + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(userData =>\n        dispatch({\n          type: FETCH_USER,\n          payload: userData,\n          userExists: 1\n        })\n      )\n      .catch(error => {\n        dispatch({\n            type: FETCH_USER,\n            payload: error,\n            userExists: 0\n          })\n    });\n  };\n\nexport const fetchUSubmissions = string => dispatch => {\n    console.log('Submissions Fetched');\n    const url = userstatus + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(submissionData =>\n        dispatch({\n          type: FETCH_USUBMISSIONS,\n          payload: submissionData,\n          name: string\n        })\n      );\n}\n\nexport const fetchRatingHist = string => dispatch => {\n    console.log('Rating History Fetched');\n    const url = userrating + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(ratingData =>\n        dispatch({\n          type: FETCH_RATINGHIST,\n          payload: ratingData,\n          name: string\n        })\n      );\n}","// Defines constant\nexport const userinfo = 'https://codeforces.com/api/user.info?handles=';\nexport const userrating = 'https://codeforces.com/api/user.rating?handle=';\nexport const userstatus = 'https://codeforces.com/api/user.status?handle=';\nexport const contests = 'https://codeforces.com/api/contest.list';","// Defines constant\nexport const FETCH_USER = 'FETCH_USER';\nexport const FETCH_RATINGHIST = 'FETCH_RATINGHIST'\nexport const FETCH_USUBMISSIONS = 'FETCH_USUBMISSIONS'\nexport const FETCH_CONTESTS = 'FETCH_CONTESTS'","import React, { Component } from 'react'\n\nexport default class RatingItem extends Component {\n\n    componentWillMount() {\n        console.log(this.props);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.num}. Contest Name: { this.props.item.contestName}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst options = {\n\tshowAllTooltips: true,\n\ttooltips: {\n\t  callbacks: {\n\t\ttitle: function(tooltipItem, data) {\n\t\t  return;\n\t\t}\n\t  }\n\t}\n  }\n\nexport default class Graph extends Component {\n    getdata=() => {\n        var data2 =[];\n        var labels = [];\n\t\tthis.props.data.map((datapoint, index) => \n\t\t\t{\n\t\t\tdata2.push(datapoint);\n\t\t\tlabels.push(index);\n\t\t\treturn 0;\n\t\t\t}\n\t\t);\n        let data = {\n            labels: this.props.labels,\n            datasets: [\n                {\n                    label: 'Rating',\n                    backgroundColor: 'rgba(65, 142, 200, 0.2)',\n\t\t\t\t\tborderColor: 'rgba(65, 142, 200, 1)',\n\t\t\t\t\tborderWidth: 1,\n                    data: data2,\n                },\n\t\t\t],\n\t\t}\n        return data;\n    }\n    render() {\n\t\treturn (\n\t\t<div>\n\t\t\t<Line options={options} data={this.getdata}/>\n\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchRatingHist } from '../../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nimport RatingItem from './SubComponents/ratingitem.js'\nimport Graph from '../SubComponents/Graph.js'\n\nexport class RatingHistory extends Component {\n\n    componentDidMount() {\n        const string2 = this.props.match.params.username;\n        this.props.fetchRatingHist(string2);\n    }\n\n    getdata=() => {\n        var data2 = [];\n        this.props.ratinghist.map((datapoint, index) => \n        {\n            data2.push(datapoint.oldRating);\n            return 0;\n        });\n        console.log(data2);\n        return data2;\n    }\n\n    getlabels=() => {\n        var data2 = [];\n        this.props.ratinghist.map((datapoint, index) => \n        {\n            data2.push(index);\n            return 0;\n        });\n        console.log(data2);\n        return data2;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <nav className=\"navbar navbar-expand-sm bg-light navbar-light nav-tabs\">\n                    <ul className=\"navbar-nav nav-fill mx-auto\">\n                    <li className=\"nav-item\">\n                            <Link to={`/user`} className=\"nav-link\"> {\"<\"} </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link\"> Basic </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link active\"> Rating History </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                <div style={{padding: \"3rem\"}}>\n                <Graph data={this.getdata()} labels={this.getlabels()} />\n                {this.props.ratinghist.map((contest, index) => (\n                    <RatingItem key={index} item={contest} num={index + 1} />\n                ))}\n</div>\n            </React.Fragment>\n        )\n    }\n}\n\nRatingHistory.propTypes = {\n    fetchRatingHist: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    ratinghist: state.user.ratinghist,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchRatingHist })(RatingHistory)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchUSubmissions } from '../../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport class UserSubmissions extends Component {\n\n    componentDidMount() {\n        const string3 = this.props.match.params.username;\n        this.props.fetchUSubmissions(string3);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <nav className=\"navbar navbar-expand-sm bg-light navbar-light nav-tabs\">\n                    <ul className=\"navbar-nav nav-fill mx-auto\" id=\"navid\">\n                        <li className=\"nav-item\">\n                            <Link to={`/user`} className=\"nav-link\"> {\"<\"} </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link\"> Basic </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link\"> Rating History </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link active\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                <div style={{ padding: \"3rem\" }}>\n                    {this.props.name}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nUserSubmissions.propTypes = {\n    fetchUSubmissions: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchUSubmissions })(UserSubmissions)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { Switch } from \"react-router-dom\";\n\nimport Form from './SubComponents/forms'\nimport UserInfo from './UserInfo'\nimport RatingHistory from './RatingHistory'\nimport UserSubmissions from './UserSubmissions'\n\nclass Users extends Component {\n\n  chartRef = React.createRef();\n\n  render() {\n    return (\n      <React.Fragment>\n        <HashRouter>\n          <div>\n          <div className=\"row\">\n            <div className=\"col-sm-1\"></div>\n            <div className=\"col-sm-10\">\n              <Switch> \n              <Route path='/user/' exact component={Form}></Route>   \n              <Route path='/user/:username/info' exact component={UserInfo}></Route>\n              <Route path='/user/:username/ratinghistory' exact component={RatingHistory}></Route>\n              <Route path='/user/:username/submissions' exact component={UserSubmissions}></Route>\n              </Switch>\n            </div>\n          </div>\n          </div>\n        </HashRouter>\n      </React.Fragment>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  userexists: state.user.userExists,\n  name: state.user.name,\n  info: state.user.info,\n  ratinghist: state.user.ratinghist,\n  usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, null)(Users);","\nimport { FETCH_CONTESTS } from './types';\nimport { contests } from './links';\n\nexport const fetchContests = () => dispatch => {\n    console.log('Contestss Fetched');\n    const url = contests;\n    let cdata = [];\n    fetch(url)\n        .then(res => res.json())\n        .then(contestsData => {\n            cdata = contestsData;\n            let upcom = [];\n            let div1 = [];\n            let div2 = [];\n            let div3 = [];\n            let cf = [];\n            let ioi = [];\n            let icpc = [];\n            let global = [];\n            cdata.result.map((contest, index) => {\n                if (contest.phase === \"BEFORE\") {\n                    upcom.push(contest);\n                }\n                if (contest.type === \"CF\") {\n                    cf.push(contest);\n                }\n                else if (contest.type === \"IOI\") {\n                    ioi.push(contest);\n                }\n                else if (contest.type === \"ICPC\") {\n                    icpc.push(contest);\n                }\n                if (contest.name.includes(\"Div. 1\")) {\n                    div1.push(contest);\n                }\n                else if (contest.name.includes(\"Div. 2\")) {\n                    div2.push(contest);\n                }\n                else if (contest.name.includes(\"Div. 3\")) {\n                    div3.push(contest);\n                }\n                else {\n                    global.push(contest);\n                }\n                return 0;\n            })\n            dispatch({\n                type: FETCH_CONTESTS,\n                payload: cdata.result,\n                upcoming: upcom,\n                div1list: div1,\n                div2list: div2,\n                div3list: div3,\n                ioilist: ioi,\n                icpclist: icpc,\n                cflist: cf,\n                globallist: global,\n                count: {\n                    div1: div1.length,\n                    div2: div2.length,\n                    div3: div3.length,\n                    ioi: ioi.length,\n                    icpc: icpc.length,\n                    cf: cf.length,\n                    global: global.length,\n                    upcoming: upcom.length,\n                    total: cdata.result.length,\n                }\n            })\n        }\n        );\n\n}","import React, { Component } from 'react'\n\nexport default class ContestItem extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            time: \"\",\n            timeleft: \"\",\n            days: \"\",\n            link: \"\",\n        }\n        this.interval = '';\n    }\n\n    componentDidMount() {\n\n        let dateObj = new Date(this.props.item.startTimeSeconds*1000);\n        function formatJSDate(dt)\n        {\n         return (dt.getMonth()+1 + '/' + dt.getDate() + '/' + (dt.getYear()+1900) + ' ' + dt.toLocaleString('en-US', { hour: 'numeric',minute:'numeric', hour12: false }));\n        }\n        let unix = new Date().getTime() / 1000;\n        let link = \"https://codeforces.com/contest/\" + this.props.item.id;\n        if(this.props.item.startTimeSeconds > unix) link = \"\";\n        this.setState({\n            time: formatJSDate(dateObj),\n            link: link,\n        })\n        console.log(\"Contest Item Mounted\");\n        if(this.props.type === 1)\n        {\n            \n        this.interval = setInterval(() => {\n            let unix = new Date().getTime() / 1000;\n            let time = this.props.item.startTimeSeconds;\n            let timeleft = time - unix;\n            let days = Math.floor(timeleft / (3600 * 24));\n            timeleft = timeleft % (3600 * 24);\n            let hours = Math.floor(timeleft / 3600);\n            timeleft = timeleft % 3600;\n            let min = Math.floor(timeleft / 60);\n            timeleft = timeleft % 60;\n            let seconds = Math.floor(timeleft);\n            let formattedTime = hours + \"h:\" + min + \"m:\" +seconds + \"s\";\n            var str = \"Days: \" + days;\n            if(!days)\n            {\n                str=\"Today\"\n            }\n            this.setState({\n                timeleft: formattedTime,\n                days: str,\n            })\n        },1000);\n    }\n    }\n    \n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n\n    render() {\n\n        let isLoggedIn = this.props.type;\n        const renderAuthButton = ()=> {\n        if(isLoggedIn === 1){\n            return <td>{this.state.days} <br/> {this.state.timeleft} </td>\n          }\n        }\n        \n        return (\n                <tr>\n                    <td>{this.props.num}</td>\n                    <td>{this.state.time}</td>\n                    <td><a href={this.state.link}>{ this.props.item.name}</a></td>\n                    {renderAuthButton()}\n                </tr>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from './SubComponents/contestitem.js'\nimport { fetchContests } from '../../actions/cfactions'\n\nexport class Upcoming extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n        console.log(\"Upcoming is loaded\");\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Time Left</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.upcominglist.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={1} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nUpcoming.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    upcominglist: state.contest.upcominglist,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Upcoming)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from '../SubComponents/contestitem.js'\nimport { fetchContests } from '../../../actions/cfactions'\n\nexport class Div1 extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Div1list.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nDiv1.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Div1list: state.contest.div1list,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Div1)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from '../SubComponents/contestitem.js'\nimport { fetchContests } from '../../../actions/cfactions'\n\nexport class Div2 extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Div2list.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nDiv2.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Div2list: state.contest.div2list,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Div2)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from '../SubComponents/contestitem.js'\nimport { fetchContests } from '../../../actions/cfactions'\n\nexport class Div3 extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Div3list.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nDiv3.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Div3list: state.contest.div3list,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Div3)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from '../SubComponents/contestitem.js'\nimport { fetchContests } from '../../../actions/cfactions'\n\nexport class Global extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Globallist.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nGlobal.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Globallist: state.contest.globallist,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Global)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from '../SubComponents/contestitem.js'\nimport { fetchContests } from '../../../actions/cfactions'\n\nexport class CFLIST extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.CFLISTlist.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nCFLIST.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    CFLISTlist: state.contest.cflist,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(CFLIST)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from '../SubComponents/contestitem.js'\nimport { fetchContests } from '../../../actions/cfactions'\n\nexport class Ioilist extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Ioilistlist.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nIoilist.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Ioilistlist: state.contest.ioilist,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Ioilist)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport ContestItem from '../SubComponents/contestitem.js'\nimport { fetchContests } from '../../../actions/cfactions'\n\nexport class Icpclist extends Component {\n    componentDidMount() {\n        if(this.props.fetched===0) this.props.fetchContests();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.Icpclistlist.map((contest, index) => (\n                            <ContestItem key={index} item={contest} num={index + 1} type={0} />\n                        ))}\n                    </tbody>\n                </table>\n            </React.Fragment>\n        )\n    }\n}\n\nIcpclist.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    Icpclistlist: state.contest.icpclist,\n})\n\nexport default connect(mapStateToProps, { fetchContests })(Icpclist)\n\n","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div >\n                <table class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Label</th>\n                            <th scope=\"col\">Count</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                    <td> 1.</td>\n                    <td>Total </td>\n                    <td>{this.props.counts.total}</td>\n                    </tr>\n                    <tr>\n                    <td>2.</td>\n                    <td>Upcoming </td>\n                    <td>{this.props.counts.upcoming}</td>\n                    </tr>\n                    <tr>\n                    <td>3.</td>\n                    <td>Division 1 </td>\n                    <td>{this.props.counts.div1}</td>\n                    </tr>\n                    <tr>\n                    <td>4.</td>\n                    <td>Division 2 </td>\n                    <td>{this.props.counts.div2}</td>\n                    </tr>\n                    <tr>\n                    <td>5.</td>\n                    <td>Division 3 </td>\n                    <td>{this.props.counts.div3}</td>\n                    </tr>\n                    <tr>\n                    <td>6.</td>\n                    <td>Global </td>\n                    <td>{this.props.counts.global}</td>\n                    </tr>\n                    <tr>\n                    <td>7.</td>\n                    <td>Code Forces Format </td>\n                    <td>{this.props.counts.cf}</td>\n                    </tr>\n                    <tr>\n                    <td>8.</td>\n                    <td>IOI Format</td>\n                    <td>{this.props.counts.ioi}</td>\n                    </tr>\n                    <tr>\n                    <td>9.</td>\n                    <td>ICPC Format</td>\n                    <td>{this.props.counts.icpc}</td>\n                    </tr>\n                    </tbody>\n                </table> \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { Switch } from \"react-router-dom\";\n\nimport { fetchContests } from '../../actions/cfactions'\nimport { Link } from 'react-router-dom'\nimport Upcoming from './Upcoming'\nimport Div1 from './Type/Div1.js';\nimport Div2 from './Type/Div2.js';\nimport Div3 from './Type/Div3.js';\nimport Global from './Type/global';\nimport  CFLIST  from './Format/Cf';\nimport  Ioilist  from './Format/Ioi';\nimport  Icpclist  from './Format/Icpc';\nimport Home from './Home';\n\nexport class ContestInfo extends Component {\n    componentDidMount() {\n        if(this.props.fetched === 0) this.props.fetchContests();\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <HashRouter>\n                    <nav className=\"navbar navbar-expand-sm bg-light navbar-light justify-content-center nav-tabs\">\n                        <ul className=\"navbar-nav \">\n                            <li className=\"nav-item\">\n                                <Link to={`/contests/`} className=\"nav-link\"> {\"<\"} </Link>\n                            </li>\n                            <li className=\"nav-item\">\n                            <Link to={`/contests/upcoming/`} className=\"nav-link\"> Upcoming </Link>\n                            </li>\n                            <li className=\"nav-item dropdown\">\n                                <Link to={'#'} className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\">Type</Link>\n                                <div class=\"dropdown-menu bg-light\">\n                                <Link to={`/contests/div1`} className=\"dropdown-item \"> Div 1 </Link>\n                                <Link to={`/contests/div2`} className=\"dropdown-item \"> Div 2 </Link>\n                                <Link to={`/contests/div3`} className=\"dropdown-item \"> Div 3 </Link>\n                                <Link to={`/contests/global`} className=\"dropdown-item \"> Global </Link>\n                                </div>\n                            </li>\n                            <li className=\"nav-item dropdown\">\n                                <Link to={'#'} className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\">Format</Link>\n                                <div class=\"dropdown-menu bg-light\">\n                                <Link to={`/contests/format/cf`} className=\"dropdown-item \"> CF </Link>\n                                <Link to={`/contests/format/ioi`} className=\"dropdown-item \"> IOI</Link>\n                                <Link to={`/contests/format/icpc`} className=\"dropdown-item \"> ICPC </Link>\n                                </div>\n                            </li>\n                        </ul>\n                    </nav>\n\n                    <br/>\n\n                    \n\n                    <Switch> \n                        <Route path='/contests/' exact component={() => (<Home counts={this.props.counts} style={{margin: \"auto\"}}/>)  }>\n                        </Route>\n                        <Route path='/contests/upcoming/' exact component={Upcoming}></Route>\n                        <Route path='/contests/div1/' exact component={Div1}></Route>\n                        <Route path='/contests/div2/' exact component={Div2}></Route>\n                        <Route path='/contests/div3/' exact component={Div3}></Route>\n                        <Route path='/contests/global/' exact component={Global}></Route>\n                        <Route path='/contests/format/cf/' exact component={CFLIST}></Route>\n                        <Route path='/contests/format/ioi/' exact component={Ioilist}></Route>\n                        <Route path='/contests/format/icpc/' exact component={Icpclist}></Route>\n                    </Switch>\n\n                </HashRouter>\n            </React.Fragment>\n        )\n    }\n}\n\nContestInfo.propTypes = {\n    fetchContests: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    fetched: state.contest.fetched,\n    counts: state.contest.count\n})\n\nexport default connect(mapStateToProps, { fetchContests })(ContestInfo)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { Switch } from \"react-router-dom\";\nimport Users from './Users/Users'\n\nimport ContestInfo from './Contests/ContestInfo'\n//import { Link } from 'react-router-dom'\n\n/* Available data :\n\n1. this.props.name\n2. this.props.info\n-------------------Data structure for info -----------------------------------------\n\n\n\n{\n      contribution: -1,\n      lastOnlineTimeSeconds: 1,\n      rating: ,\n      friendOfCount: 0,\n      titlePhoto: '//userpic.codeforces.com/no-title.jpg',\n      rank: '',\n      handle: '-e',\n      maxRating: ,\n      avatar: '//userpic.codeforces.com/no-avatar.jpg',\n      registrationTimeSeconds: 1571594608,\n      maxRank: ''\n},\n\n    \n\n3. this.props.ratinghist\n\n------------------- Data structure for ratinghist --------------------------------- ratinghist is array so each array element is as shown\n\nratinghist: [\n      {\n        contestId: 1,\n        contestName: '',\n        handle: 'name of the user',\n        rank: his rank,\n        ratingUpdateTimeSeconds: 1571936700,\n        oldRating: rating old,\n        newRating: rating new,\n      },\n\t]\n\n4. this.props.usersubmissions\n\n------ It have the following data -------- Make sure this.props.usersubmissions[i] exists before checking out this.props.usersubmissions[i].id or contestId\n\n       {\n          \"id\": -1,\n          \"contestId\": -1,\n          \"creationTimeSeconds\": 0,\n          \"relativeTimeSeconds\": 0,\n          \"problem\": {\n            \"contestId\": 0,\n            \"index\": \"1\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"points\": 1,\n            \"rating\": 1,\n            \"tags\": [\n              \"-\",\n              \"-\",\n              \"-\"\n            ]\n          },\n          \"author\": {\n            \"contestId\": 1,\n            \"members\": [\n              {\n                \"handle\": \"\"\n              }\n            ],\n            \"participantType\": \"PRACTICE\",\n            \"ghost\": false,\n            \"startTimeSeconds\": 1\n          },\n          \"programmingLanguage\": \"GNU C++14\",\n          \"verdict\": \"OK\",\n          \"testset\": \"TESTS\",\n          \"passedTestCount\": 66,\n          \"timeConsumedMillis\": 296,\n          \"memoryConsumedBytes\": 1638400\n        }]\n\n*/\n\nclass Main extends Component {\n\n  chartRef = React.createRef();\n\n  render() {\n    return (\n      <React.Fragment>\n      <HashRouter>\n        <div>\n        <div className=\"row\">\n          <div className=\"col-sm-1\"></div>\n          <div className=\"col-sm-10\">\n            <Switch> \n            <Route path='/contests/' component={ContestInfo}></Route>   \n            <Route path='/user/' component={Users}></Route>   \n            </Switch>\n          </div>\n        </div>\n        </div>\n      </HashRouter>\n    </React.Fragment>\n    )\n  }\n}\n\nexport default connect(null, null)(Main);","import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from '../actions/types';\n\nconst initialState = {\n  userExists: 0,\n  name: '',\n  info: {\n    contribution: '',\n    lastOnlineTimeSeconds: '',\n    rating: '',\n    friendOfCount: '',\n    titlePhoto: '',\n    rank: '',\n    handle: '-e',\n    maxRating: '',\n    avatar: '',\n    registrationTimeSeconds: '',\n    maxRank: ''\n  },\n  ratinghist: [],\n  usersubmissions: [\n    {\n      \"id\": -1,\n      \"contestId\": -1,\n      \"creationTimeSeconds\": 0,\n      \"relativeTimeSeconds\": 0,\n      \"problem\": {\n        \"contestId\": 0,\n        \"index\": \"1\",\n        \"name\": \"\",\n        \"type\": \"\",\n        \"points\": 1,\n        \"rating\": 1,\n        \"tags\": [\n          \"-\",\n          \"-\",\n          \"-\"\n        ]\n      },\n      \"author\": {\n        \"contestId\": 1,\n        \"members\": [\n          {\n            \"handle\": \"\"\n          }\n        ],\n        \"participantType\": \"PRACTICE\",\n        \"ghost\": false,\n        \"startTimeSeconds\": 1\n      },\n      \"programmingLanguage\": \"GNU C++14\",\n      \"verdict\": \"OK\",\n      \"testset\": \"TESTS\",\n      \"passedTestCount\": 66,\n      \"timeConsumedMillis\": 296,\n      \"memoryConsumedBytes\": 1638400\n    }]\n}\n\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n    case FETCH_USER:\n      console.log(action.payload);\n      if (action.payload.result) {\n        return {\n          ...state,\n          name: action.payload.result[0].handle,\n          info: action.payload.result[0],\n          userExists: action.userExists\n        };\n      }\n      else {\n        return {\n          ...state,\n          name: 'User_Not_Found',\n          //info: initialState.info,\n          userExists: action.userExists\n        };\n      }\n    case FETCH_RATINGHIST:\n      {\n        console.log(action.payload.result);\n        return {\n          ...state,\n          ratinghist: action.payload.result,\n          name: action.name\n        };\n      }\n    case FETCH_USUBMISSIONS:\n      {\n        console.log(\"Submissions\");\n        console.log(action.payload.result);\n        return {\n          ...state,\n          usersubmissions: action.payload.result,\n          name: action.name\n        };\n      }\n  }\n}","import { FETCH_CONTESTS } from '../actions/types';\n\nconst initialstate = {\n    contestlist: [],\n    upcominglist: [],\n    div1list: [],\n    div2list: [],\n    div3list: [],\n    globallist: [],\n    cflist: [],\n    icpclist: [],\n    ioilist: [],\n    fetched: 0,\n    count: {\n        div1: 0,\n        div2: 0,\n        div3: 0,\n        ioi:0,\n        icpc: 0,\n        cf: 0,\n        global: 0,\n        upcoming: 0,\n        total: 0,\n    }\n}\n\nexport default function(state = initialstate,action) {\n    switch(action.type)\n    {\n        default:\n            return state;\n        case FETCH_CONTESTS:\n            console.log(action.div1list);\n            return {\n                ...state,\n                contestlist: action.payload.result,\n                upcominglist: action.upcoming,\n                div1list: action.div1list,\n                div2list: action.div2list,\n                div3list: action.div3list,\n                globallist: action.globallist,\n                cflist: action.cflist,\n                icpclist: action.icpclist,\n                ioilist: action.ioilist,\n                fetched: 1,\n                count: action.count,\n            };\n    }\n}","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\nimport contestReducer from './cfReducer';\n\nexport default combineReducers({\n    contest: contestReducer,\n    user: userReducer,\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)/*,\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/\n    )\n);\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Main from './Components/Main';\n\nimport store from './store'\nimport { HashRouter } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter>\n        <div>\n          <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark scrolling-navbar \">\n            <div>\n              <a class=\"navbar-brand \" href=\"/\"><strong>Codux</strong></a>\n            </div>\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n              <ul className=\"navbar-nav ml-auto work\" data-toggle=\"collapse\" data-target=\"#navbarNav\">\n                <li className=\"nav-item\">\n                  <Link to={`/contests`} className=\"nav-link\"> Contests </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link to={`/user`} className=\"nav-link\"> Search </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"https://github.com/pulkit1joshi/Codux-Profile\">Git</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"/\">About</a>\n                </li>\n              </ul>\n            </div>\n\n\n          </nav>\n        </div>\n        <div className=\"container\" style={{ paddingBottom: \"60px;\" }}>\n          <div className=\"row\">\n            <div className=\"col-lg-12 text-center\">\n              <h1 className=\"mt-5\">Codux</h1>\n              <p className=\"lead\">Check your coding profile at <img\n                src=\"https://sta.codeforces.com/s/70808/images/codeforces-logo-with-telegram.png\" alt=\"Codeforces\"\n                style={{ width: \"15%\", height: \"15%\" }}></img>\n              </p>\n              <div className=\"App\">\n                <hr />\n                <Main />\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}