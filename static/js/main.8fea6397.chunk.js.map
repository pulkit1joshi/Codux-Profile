{"version":3,"sources":["actions/userActions.js","actions/types.js","Components/ratingitem.js","Components/Main.js","Reducers/userReducer.js","Reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["fetchUser","string","dispatch","console","log","fetch","then","res","json","userData","type","payload","userExists","catch","error","fetchRatingHist","ratingData","fetchUSubmissions","submissionData","RatingItem","this","props","num","item","contestName","Component","Main","state","name","onChange","bind","onSubmit","e","preventDefault","string2","string3","setState","target","value","i","usersubmissions","id","Fragment","className","userexists","src","info","titlePhoto","alt","height","width","rank","organisation","contribution","rating","maxRank","maxRating","ratinghist","map","contest","index","key","connect","user","bindActionCreators","initialState","combineReducers","action","result","handle","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8fea6397.chunk.js","sourcesContent":["import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from './types';\n\nexport const fetchUser = string => dispatch => {\n    console.log(\"User fetched\");\n    fetch(string)\n      .then(res => res.json())\n      .then(userData =>\n        dispatch({\n          type: FETCH_USER,\n          payload: userData,\n          userExists: 1\n        })\n      )\n      .catch(error => {\n        dispatch({\n            type: FETCH_USER,\n            payload: error,\n            userExists: 0\n          })\n    });\n  };\n\nexport const fetchRatingHist = string => dispatch => {\n    console.log('Rating History Fetched');\n    fetch(string)\n      .then(res => res.json())\n      .then(ratingData =>\n        dispatch({\n          type: FETCH_RATINGHIST,\n          payload: ratingData,\n        })\n      );\n}\n\nexport const fetchUSubmissions = string => dispatch => {\n    console.log('Submissions Fetched');\n    fetch(string)\n      .then(res => res.json())\n      .then(submissionData =>\n        dispatch({\n          type: FETCH_USUBMISSIONS,\n          payload: submissionData,\n        })\n      );\n}","// Defines constant\nexport const FETCH_USER = 'FETCH_USER';\nexport const FETCH_RATINGHIST = 'FETCH_RATINGHIST'\nexport const FETCH_USUBMISSIONS = 'FETCH_USUBMISSIONS'","import React, { Component } from 'react'\n\nexport default class RatingItem extends Component {\n\n    componentWillMount() {\n        console.log(this.props);\n    }\n    \n    render() {\n        return (\n            <div>\n               { this.props.num }. Contest Name: { this.props.item.contestName }\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { fetchUser, fetchRatingHist , fetchUSubmissions} from '../actions/userActions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport RatingItem from './ratingitem.js'\n\n/* Available data :\n\n1. this.props.name\n2. this.props.info\n-------------------Data structure for info -----------------------------------------\n\n\n\n{\n      contribution: -1,\n      lastOnlineTimeSeconds: 1,\n      rating: ,\n      friendOfCount: 0,\n      titlePhoto: '//userpic.codeforces.com/no-title.jpg',\n      rank: '',\n      handle: '-e',\n      maxRating: ,\n      avatar: '//userpic.codeforces.com/no-avatar.jpg',\n      registrationTimeSeconds: 1571594608,\n      maxRank: ''\n},\n\n    \n\n3. this.props.ratinghist\n\n------------------- Data structure for ratinghist --------------------------------- ratinghist is array so each array element is as shown\n\nratinghist: [\n      {\n        contestId: 1,\n        contestName: '',\n        handle: 'name of the user',\n        rank: his rank,\n        ratingUpdateTimeSeconds: 1571936700,\n        oldRating: rating old,\n        newRating: rating new,\n      },\n\t]\n\n4. this.props.usersubmissions\n\n------ It have the following data -------- Make sure this.props.usersubmissions[i] exists before checking out this.props.usersubmissions[i].id or contestId\n\n       {\n          \"id\": -1,\n          \"contestId\": -1,\n          \"creationTimeSeconds\": 0,\n          \"relativeTimeSeconds\": 0,\n          \"problem\": {\n            \"contestId\": 0,\n            \"index\": \"1\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"points\": 1,\n            \"rating\": 1,\n            \"tags\": [\n              \"-\",\n              \"-\",\n              \"-\"\n            ]\n          },\n          \"author\": {\n            \"contestId\": 1,\n            \"members\": [\n              {\n                \"handle\": \"\"\n              }\n            ],\n            \"participantType\": \"PRACTICE\",\n            \"ghost\": false,\n            \"startTimeSeconds\": 1\n          },\n          \"programmingLanguage\": \"GNU C++14\",\n          \"verdict\": \"OK\",\n          \"testset\": \"TESTS\",\n          \"passedTestCount\": 66,\n          \"timeConsumedMillis\": 296,\n          \"memoryConsumedBytes\": 1638400\n        }]\n\n*/\n\nclass Main extends Component {\n\nconstructor(props)\n{\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tname: '',\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n}\n\nonSubmit(e)\n{\n\te.preventDefault();\n\tconst string = 'https://codeforces.com/api/user.info?handles=' + this.state.name;\n\tconsole.log(string);\n\tthis.props.fetchUser(string);\n\tconst string2 = 'https://codeforces.com/api/user.rating?handle=' + this.state.name;\n\tthis.props.fetchRatingHist(string2);\n\tconst string3 = 'https://codeforces.com/api/user.status?handle=' + this.state.name;\n\tthis.props.fetchUSubmissions(string3);\n}\n\nonChange(e)\n{\n\tthis.setState({[e.target.name]: e.target.value});\n\t//console.log(this.props.ratinghist[0]);\n\tfor(var i=0;i<10;i++)\n\t\tif(this.props.usersubmissions[i])\n\t\t\tconsole.log(this.props.usersubmissions[i].id)\n\t\n}\n\nrender() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"row\">\n\t\t<div className=\"col-sm-4\"></div>\n\t\t<div className=\"col-sm-4\">\n\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\tEnter Handle :\n\t\t\t<input type=\"text\" name=\"name\" className=\"form-control form-control\" value={this.state.name} onChange={this.onChange} /><br/>\n\t\t\t<button type=\"submit\" className=\"btn btn-light\">Submit</button>\n\t\t\t<br/>\n\t\t\t{ this.props.userexists &&\n\t\t\t<div>\n\t\t\t<img src={this.props.info.titlePhoto} alt=\"Title\" height=\"100\" width=\"100\"></img><br/>\n\t\t\tHandle : { this.props.name }\t<br/>\t\n\t\t\tRank : {this.props.info.rank } <br/>\n\t\t\tOrganisation: { this.props.info.organisation } <br/>\n\t\t\tContribution: { this.props.info.contribution } <br/>\n\t\t\tRating: { this.props.info.rating } <br/>\n\t\t\tMaxrank: { this.props.info.maxRank } <br/>\n\t\t\tMaxRating: { this.props.info.maxRating } <br/>\n\t\t\t\n\t\t\t<br/>\n\t\t\t{this.props.ratinghist.map((contest, index) => (\n        \t<RatingItem key={index} item={contest} num={index+1} />\n      \t\t))}\n\t\t\t</div>\n\t\t\t}\n\t\t\t</form>\n\t\t</div>\n\t\t<div className=\"col-sm-4\"></div>\n\t\t</div>\n\t\t</React.Fragment>\n\t\t)\n\t}\n}\n\nMain.propTypes = {\n\tfetchUser: PropTypes.func.isRequired\n  };\n\nconst mapStateToProps = state => ({\n\tuserexists: state.user.userExists,\n\tname: state.user.name,\n\tinfo: state.user.info,\n\tratinghist: state.user.ratinghist,\n\tusersubmissions: state.user.usersubmissions\n})\n\nfunction mapDispatchToProps(dispatch) {\n\treturn bindActionCreators({ fetchUser, fetchRatingHist, fetchUSubmissions }, dispatch)\n  }\n\nexport default connect(mapStateToProps , mapDispatchToProps)( Main );","import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from '../actions/types';\n\nconst initialState = {\n    userExists: 0,\n    name: '',\n    info: {},\n    ratinghist: [],\n    usersubmissions: [\n        {\n          \"id\": -1,\n          \"contestId\": -1,\n          \"creationTimeSeconds\": 0,\n          \"relativeTimeSeconds\": 0,\n          \"problem\": {\n            \"contestId\": 0,\n            \"index\": \"1\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"points\": 1,\n            \"rating\": 1,\n            \"tags\": [\n              \"-\",\n              \"-\",\n              \"-\"\n            ]\n          },\n          \"author\": {\n            \"contestId\": 1,\n            \"members\": [\n              {\n                \"handle\": \"\"\n              }\n            ],\n            \"participantType\": \"PRACTICE\",\n            \"ghost\": false,\n            \"startTimeSeconds\": 1\n          },\n          \"programmingLanguage\": \"GNU C++14\",\n          \"verdict\": \"OK\",\n          \"testset\": \"TESTS\",\n          \"passedTestCount\": 66,\n          \"timeConsumedMillis\": 296,\n          \"memoryConsumedBytes\": 1638400\n        }]\n}\n\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        default:\n            return state;\n        case FETCH_USER:\n            console.log(action.payload);\n            return {\n                ...state,\n                name: action.payload.result[0].handle,\n                info: action.payload.result[0],\n                userExists: action.userExists\n            };\n        case FETCH_RATINGHIST:\n            {\n                console.log(action.payload.result);\n                return {\n                    ...state,\n                    ratinghist: action.payload.result\n                };\n            }\n        case FETCH_USUBMISSIONS:\n            {\n                console.log(\"Submissions\");\n                console.log(action.payload.result);\n                return {\n                    ...state,\n                    usersubmissions: action.payload.result\n                };\n            }\n    }\n}","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\n\nexport default combineReducers({\n    user: userReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n        rootReducer,\n        initialState,\n        compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    );\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Main from './Components/Main';\n\nimport store from './store'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n    <hr/>\n    <Main/>\n    </div>\n    </Provider>\n    );\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}