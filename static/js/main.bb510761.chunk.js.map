{"version":3,"sources":["Components/forms.js","Components/UserInfo.js","actions/userActions.js","actions/links.js","actions/types.js","Components/ratingitem.js","Components/RatingHistory.js","Components/UserSubmissions.js","Components/Main.js","Reducers/userReducer.js","Reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","name","onChange","bind","e","this","setState","target","value","type","className","to","Component","UserInfo","string","match","params","username","fetchUser","Fragment","class","userexists","src","info","titlePhoto","alt","height","width","rank","organisation","contribution","rating","maxRank","maxRating","connect","user","userExists","ratinghist","usersubmissions","dispatch","console","log","fetch","then","res","json","userData","payload","catch","error","RatingItem","num","item","contestName","RatingHistory","string2","fetchRatingHist","map","contest","index","key","ratingData","UserSubmissions","string3","fetchUSubmissions","submissionData","Main","chartRef","React","createRef","path","exact","component","initialState","lastOnlineTimeSeconds","friendOfCount","handle","avatar","registrationTimeSeconds","combineReducers","action","result","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bb510761.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n\n                <form>\n                    Enter Handle :\n\t\t\t    <input type=\"text\" name=\"name\" className=\"form-control form-control\" value={this.state.name} onChange={this.onChange} /><br />\n                    <Link to={`user/${this.state.name}/info`}><button type=\"submit\" className=\"btn btn-light\">Submit</button></Link>\n                    <br />\n                </form>\n\n            </div>\n        )\n    }\n}\n\nForm.propTypes = {\n    fetchUser: PropTypes.func.isRequired\n};\n\n\n\nexport default Form;\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchUser } from '../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport class UserInfo extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n        };\n    }\n\n    componentDidMount() {\n        const string = this.props.match.params.username;\n        this.props.fetchUser(string);\n    }\n\n\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <nav class=\"navbar navbar-expand-sm bg-light navbar-light\">\n                    <ul class=\"navbar-nav mx-auto\">\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link\"> Basic </Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link\"> Rating History </Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                {this.props.name}\t<br />\n                {this.props.userexists &&\n                    <div>\n                        <img src={this.props.info.titlePhoto} alt=\"Title\" height=\"100\" width=\"100\"></img><br />\n\t\t\tRank : {this.props.info.rank} <br />\n\t\t\tOrganisation: {this.props.info.organisation} <br />\n\t\t\tContribution: {this.props.info.contribution} <br />\n\t\t\tRating: {this.props.info.rating} <br />\n\t\t\tMaxrank: {this.props.info.maxRank} <br />\n\t\t\tMaxRating: {this.props.info.maxRating} <br />\n                        <br />\n                    </div>\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nUserInfo.propTypes = {\n    fetchUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    info: state.user.info,\n    ratinghist: state.user.ratinghist,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchUser })(UserInfo)\n","import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from './types';\nimport {userstatus , userrating, userinfo } from './links'\n\nexport const fetchUser = string => dispatch => {\n    console.log(\"User fetched\");\n    const url = userinfo + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(userData =>\n        dispatch({\n          type: FETCH_USER,\n          payload: userData,\n          userExists: 1\n        })\n      )\n      .catch(error => {\n        dispatch({\n            type: FETCH_USER,\n            payload: error,\n            userExists: 0\n          })\n    });\n  };\n\nexport const fetchUSubmissions = string => dispatch => {\n    console.log('Submissions Fetched');\n    const url = userstatus + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(submissionData =>\n        dispatch({\n          type: FETCH_USUBMISSIONS,\n          payload: submissionData,\n          name: string\n        })\n      );\n}\n\nexport const fetchRatingHist = string => dispatch => {\n    console.log('Rating History Fetched');\n    const url = userrating + string;\n    fetch(url)\n      .then(res => res.json())\n      .then(ratingData =>\n        dispatch({\n          type: FETCH_RATINGHIST,\n          payload: ratingData,\n          name: string\n        })\n      );\n}","// Defines constant\nexport const userinfo = 'https://codeforces.com/api/user.info?handles=';\nexport const userrating = 'https://codeforces.com/api/user.rating?handle=';\nexport const userstatus = 'https://codeforces.com/api/user.status?handle=';","// Defines constant\nexport const FETCH_USER = 'FETCH_USER';\nexport const FETCH_RATINGHIST = 'FETCH_RATINGHIST'\nexport const FETCH_USUBMISSIONS = 'FETCH_USUBMISSIONS'","import React, { Component } from 'react'\n\nexport default class RatingItem extends Component {\n\n    componentWillMount() {\n        console.log(this.props);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.num}. Contest Name: { this.props.item.contestName}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport RatingItem from './ratingitem.js'\nimport { fetchRatingHist } from '../actions/userActions'\nimport PropTypes from 'prop-types'\n//import { bindActionCreators } from 'redux'\nimport { Link } from 'react-router-dom'\n\nexport class RatingHistory extends Component {\n\n    componentDidMount() {\n        const string2 = this.props.match.params.username;\n        this.props.fetchRatingHist(string2);\n        /*\n        const string3 = userstatus + this.props.match.params.username;\n        this.props.fetchUSubmissions(string3);*/\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <nav class=\"navbar navbar-expand-sm bg-light navbar-light\">\n                    <ul class=\"navbar-nav mx-auto\">\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link\"> Basic </Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link\"> Rating History </Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                {this.props.ratinghist.map((contest, index) => (\n                    <RatingItem key={index} item={contest} num={index + 1} />\n                ))}\n            </React.Fragment>\n        )\n    }\n}\n\nRatingHistory.propTypes = {\n    fetchRatingHist: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    ratinghist: state.user.ratinghist,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchRatingHist })(RatingHistory)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchUSubmissions } from '../actions/userActions'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport class UserSubmissions extends Component {\n\n    componentDidMount() {\n        const string3 = this.props.match.params.username;\n        this.props.fetchUSubmissions(string3);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <nav class=\"navbar navbar-expand-sm bg-light navbar-light\">\n                    <ul class=\"navbar-nav mx-auto\">\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/info`} className=\"nav-link\"> Basic </Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/ratinghistory`} className=\"nav-link\"> Rating History </Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link to={`/user/${this.props.name}/submissions`} className=\"nav-link\"> Submissions </Link>\n                        </li>\n                    </ul>\n                </nav>\n                {this.props.name}\n            </React.Fragment>\n        )\n    }\n}\n\nUserSubmissions.propTypes = {\n    fetchUSubmissions: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    userexists: state.user.userExists,\n    name: state.user.name,\n    usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, { fetchUSubmissions })(UserSubmissions)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Form from './forms'\nimport UserInfo from './UserInfo'\nimport RatingHistory from './RatingHistory'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport UserSubmissions from './UserSubmissions'\n\n/* Available data :\n\n1. this.props.name\n2. this.props.info\n-------------------Data structure for info -----------------------------------------\n\n\n\n{\n      contribution: -1,\n      lastOnlineTimeSeconds: 1,\n      rating: ,\n      friendOfCount: 0,\n      titlePhoto: '//userpic.codeforces.com/no-title.jpg',\n      rank: '',\n      handle: '-e',\n      maxRating: ,\n      avatar: '//userpic.codeforces.com/no-avatar.jpg',\n      registrationTimeSeconds: 1571594608,\n      maxRank: ''\n},\n\n    \n\n3. this.props.ratinghist\n\n------------------- Data structure for ratinghist --------------------------------- ratinghist is array so each array element is as shown\n\nratinghist: [\n      {\n        contestId: 1,\n        contestName: '',\n        handle: 'name of the user',\n        rank: his rank,\n        ratingUpdateTimeSeconds: 1571936700,\n        oldRating: rating old,\n        newRating: rating new,\n      },\n\t]\n\n4. this.props.usersubmissions\n\n------ It have the following data -------- Make sure this.props.usersubmissions[i] exists before checking out this.props.usersubmissions[i].id or contestId\n\n       {\n          \"id\": -1,\n          \"contestId\": -1,\n          \"creationTimeSeconds\": 0,\n          \"relativeTimeSeconds\": 0,\n          \"problem\": {\n            \"contestId\": 0,\n            \"index\": \"1\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"points\": 1,\n            \"rating\": 1,\n            \"tags\": [\n              \"-\",\n              \"-\",\n              \"-\"\n            ]\n          },\n          \"author\": {\n            \"contestId\": 1,\n            \"members\": [\n              {\n                \"handle\": \"\"\n              }\n            ],\n            \"participantType\": \"PRACTICE\",\n            \"ghost\": false,\n            \"startTimeSeconds\": 1\n          },\n          \"programmingLanguage\": \"GNU C++14\",\n          \"verdict\": \"OK\",\n          \"testset\": \"TESTS\",\n          \"passedTestCount\": 66,\n          \"timeConsumedMillis\": 296,\n          \"memoryConsumedBytes\": 1638400\n        }]\n\n*/\n\nclass Main extends Component {\n\n  chartRef = React.createRef();\n\n  render() {\n    return (\n      <React.Fragment>\n        <BrowserRouter>\n          <div className=\"row\">\n            <div className=\"col-sm-1\"></div>\n            <div className=\"col-sm-10\">\n\n              <Route path='/Codux-Profile' exact component={Form}></Route>\n              <Route path='/user/:username/info' component={UserInfo}></Route>\n              <Route path='/user/:username/ratinghistory' component={RatingHistory}></Route>\n              <Route path='/user/:username/submissions' component={UserSubmissions}></Route>\n            </div>\n          </div>\n        </BrowserRouter>\n      </React.Fragment>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  userexists: state.user.userExists,\n  name: state.user.name,\n  info: state.user.info,\n  ratinghist: state.user.ratinghist,\n  usersubmissions: state.user.usersubmissions\n})\n\nexport default connect(mapStateToProps, null)(Main);","import { FETCH_USER, FETCH_RATINGHIST, FETCH_USUBMISSIONS } from '../actions/types';\n\nconst initialState = {\n  userExists: 0,\n  name: '',\n  info: {\n    contribution: '',\n    lastOnlineTimeSeconds: '',\n    rating: '',\n    friendOfCount: '',\n    titlePhoto: '',\n    rank: '',\n    handle: '-e',\n    maxRating: '',\n    avatar: '',\n    registrationTimeSeconds: '',\n    maxRank: ''\n  },\n  ratinghist: [],\n  usersubmissions: [\n    {\n      \"id\": -1,\n      \"contestId\": -1,\n      \"creationTimeSeconds\": 0,\n      \"relativeTimeSeconds\": 0,\n      \"problem\": {\n        \"contestId\": 0,\n        \"index\": \"1\",\n        \"name\": \"\",\n        \"type\": \"\",\n        \"points\": 1,\n        \"rating\": 1,\n        \"tags\": [\n          \"-\",\n          \"-\",\n          \"-\"\n        ]\n      },\n      \"author\": {\n        \"contestId\": 1,\n        \"members\": [\n          {\n            \"handle\": \"\"\n          }\n        ],\n        \"participantType\": \"PRACTICE\",\n        \"ghost\": false,\n        \"startTimeSeconds\": 1\n      },\n      \"programmingLanguage\": \"GNU C++14\",\n      \"verdict\": \"OK\",\n      \"testset\": \"TESTS\",\n      \"passedTestCount\": 66,\n      \"timeConsumedMillis\": 296,\n      \"memoryConsumedBytes\": 1638400\n    }]\n}\n\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n    case FETCH_USER:\n      console.log(action.payload);\n      if (action.payload.result) {\n        return {\n          ...state,\n          name: action.payload.result[0].handle,\n          info: action.payload.result[0],\n          userExists: action.userExists\n        };\n      }\n      else {\n        return {\n          ...state,\n          name: 'User_Not_Found',\n          //info: initialState.info,\n          userExists: action.userExists\n        };\n      }\n    case FETCH_RATINGHIST:\n      {\n        console.log(action.payload.result);\n        return {\n          ...state,\n          ratinghist: action.payload.result,\n          name: action.name\n        };\n      }\n    case FETCH_USUBMISSIONS:\n      {\n        console.log(\"Submissions\");\n        console.log(action.payload.result);\n        return {\n          ...state,\n          usersubmissions: action.payload.result,\n          name: action.name\n        };\n      }\n  }\n}","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\n\nexport default combineReducers({\n    user: userReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)/*,\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/\n    )\n);\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Main from './Components/Main';\n\nimport store from './store'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <hr />\n        <Main />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}